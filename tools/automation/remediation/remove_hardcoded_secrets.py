#!/usr/bin/env python3
"""
Auto-remediation script: Remove hardcoded secrets
Addresses: hardcoded_secrets finding type
"""

import re
import shutil
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Tuple


def remove_hardcoded_secrets(workspace_path: str = ".") -> bool:
    """Remove hardcoded secrets and replace with secure references"""
    workspace = Path(workspace_path)

    # Common secret patterns
    secret_patterns: List[Tuple[str, str]] = [
        (r'password\s*=\s*["\']([^"\']+)["\']', 'password = os.getenv("PASSWORD")'),
        (r'api_key\s*=\s*["\']([^"\']+)["\']', 'api_key = os.getenv("API_KEY")'),
        (
            r'secret_key\s*=\s*["\']([^"\']+)["\']',
            'secret_key = os.getenv("SECRET_KEY")',
        ),
        (r'token\s*=\s*["\']([^"\']+)["\']', 'token = os.getenv("TOKEN")'),
        (
            r'connection_string\s*=\s*["\']([^"\']+)["\']',
            'connection_string = os.getenv("CONNECTION_STRING")',
        ),
    ]

    modified_files: List[str] = []
    secrets_found: List[Dict[str, Any]] = []

    # Search Python files for hardcoded secrets
    for py_file in workspace.rglob("*.py"):
        if "venv" in str(py_file) or "__pycache__" in str(py_file):
            continue

        try:
            with open(py_file, "r", encoding="utf-8") as f:
                content = f.read()

            original_content = content
            file_secrets: List[Dict[str, Any]] = []

            for pattern, replacement in secret_patterns:
                matches = re.finditer(pattern, content, re.IGNORECASE)
                for match in matches:
                    secret_value = match.group(1)
                    if (
                        len(secret_value) > 8
                    ):  # Only flag longer strings as potential secrets
                        file_secrets.append(
                            {
                                "file": str(py_file),
                                "pattern": pattern,
                                "value": (
                                    secret_value[:10] + "..."
                                    if len(secret_value) > 10
                                    else secret_value
                                ),
                            }
                        )
                        content = re.sub(
                            pattern, replacement, content, flags=re.IGNORECASE
                        )

            if content != original_content:
                # Create backup before modifying
                backup_path = py_file.with_suffix(".py.backup")
                shutil.copy2(py_file, backup_path)

                # Add import for os if not present
                if "import os" not in content and "os.getenv" in content:
                    content = "import os\n" + content

                with open(py_file, "w", encoding="utf-8") as f:
                    f.write(content)

                modified_files.append(str(py_file))
                secrets_found.extend(file_secrets)
                print(
                    f"🔒 Modified {py_file} - removed {len(file_secrets)} hardcoded secrets"
                )

        except Exception as e:
            print(f"⚠️ Error processing {py_file}: {e}")

    # Generate .env.example file
    if secrets_found:
        env_example_path = workspace / ".env.example"
        env_content = "# Environment variables for secure configuration\n"
        env_content += f"# Generated by PepeluGPT Auto-Remediation on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        unique_vars: set[str] = set()
        for secret in secrets_found:
            var_name = re.search(r"(\w+)\s*=", secret["pattern"])
            if var_name:
                env_var = var_name.group(1).upper()
                if env_var not in unique_vars:
                    env_content += f"{env_var}=your_{env_var.lower()}_here\n"
                    unique_vars.add(env_var)

        with open(env_example_path, "w", encoding="utf-8") as f:
            f.write(env_content)

        print(f"📝 Created .env.example with {len(unique_vars)} environment variables")

    # Create remediation report
    if modified_files:
        report_path = workspace / "logs" / "secret_remediation_report.json"
        report_path.parent.mkdir(exist_ok=True)

        import json

        report: Dict[str, Any] = {
            "timestamp": datetime.now().isoformat(),
            "modified_files": modified_files,
            "secrets_removed": len(secrets_found),
            "backup_files": [f + ".backup" for f in modified_files],
            "status": "completed",
        }

        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2)

        print(f"📊 Created remediation report at {report_path}")
        print(
            f"✅ Successfully removed {len(secrets_found)} hardcoded secrets from {len(modified_files)} files"
        )
        return True

    print("🔍 No hardcoded secrets found")
    return True


if __name__ == "__main__":
    workspace = sys.argv[1] if len(sys.argv) > 1 else "."
    success = remove_hardcoded_secrets(workspace)
    sys.exit(0 if success else 1)
