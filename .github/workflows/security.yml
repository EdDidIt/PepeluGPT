name: Security Scan

on:
  pull_request:
    branches: [main]

jobs:
  bandit-scan:
    name:  Security Vulnerability Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-
          ${{ runner.os }}-pip-
        
    - name:  Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml] pip-audit
      continue-on-error: false
        
    - name:  Dependency Vulnerability Scan
      run: |
        set -e
        echo "Running pip-audit..."
        pip-audit --format=json --output=pip-audit-report.json || echo "pip-audit found vulnerabilities"
        echo "Running safety check..."
        safety check --json --output safety-report.json || echo "safety check found vulnerabilities"
      continue-on-error: true
        
    - name: Code Security Analysis
      run: |
        echo "Running bandit security analysis..."
        bandit -r . -f json -o bandit-report.json || echo "bandit found security issues"
      continue-on-error: true
        
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          pip-audit-report.json
          safety-report.json
          bandit-report.json
        retention-days: 30
          
    - name: Create Security Issue
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Security Vulnerability Detected - Run #${{ github.run_number }}',
            body: `A security scan has detected potential vulnerabilities.
            
            Scan Details:
            - Run ID: ${{ github.run_id }}
            - Run Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Workflow: ${{ github.workflow }}
            
            Next Steps:
            1. Download the security reports from the workflow artifacts
            2. Review each vulnerability report carefully
            3. Update dependencies or fix code issues as needed
            4. Re-run the security scan to verify fixes
            
            Please review the security reports and take appropriate action.`,
            labels: ['security', 'high-priority', 'vulnerability']
          })

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Scan for Secrets
      uses: trufflesecurity/trufflehog@v3.76.3
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-license-${{ hashFiles('/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-license-
          ${{ runner.os }}-pip-
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "No requirements.txt found, skipping project dependencies"
        fi
        pip install pip-licenses
      continue-on-error: false
        
    - name: Check Licenses
      run: |
        echo "Generating license reports..."
        pip-licenses --format=json --output-file=license-report.json || echo "Failed to generate JSON report"
        pip-licenses --format=markdown --output-file=license-report.md || echo "Failed to generate Markdown report"
        pip-licenses --format=plain-vertical || echo "Failed to display license summary"
      continue-on-error: true
        
    - name: Upload License Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-report-${{ github.run_number }}
        path: |
          license-report.json
          license-report.md
        retention-days: 30
